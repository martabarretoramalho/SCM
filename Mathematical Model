import pulp as plp

locals = ["L1", "L2", "L3", "L4", "L5", "L6", "L7", "L8", "L9", "L10", "L11", "L12", "L13", "L14", "L15", "L16", "L17", "L18"] # where to produce
districts = ["Bragança", "Viseu", "Vila Real", "Coimbra", "Viana do Castelo", "Braga", "Guarda", 
             "Castelo Branco", "Beja", "Santarém", "Lisboa", "Porto", "Leiria", "Faro", 
             "Aveiro", "Setúbal", "Portalegre", "Évora"] # where to consume

cost_instalation = {loc: {"S": 17800, "M": 267000, "L": 854400} for loc in locals}

fabrics_capacity = {"S": 10, "M": 150, "L": 480}

distance = {
    ('L1', 'Bragança'):0, ('L1', 'Viseu'): 200, ('L1', 'L3'): 118, ('L1', 'L4'): 324, ('L1', 'L5'): 274, ('L1', 'L6'): 217, ('L1', 'L7'): 178, 
    ('L1', 'L8'): 273, ('L1', 'L9'): 542, ('L1', 'L10'): 444, ('L1', 'L11'): 510, ('L1', 'L12'): 210, ('L1', 'L13'): 383, ('L1', 'L14'): 751, 
    ('L1', 'L15'): 272, ('L1', 'L16'): 545, ('L1', 'Portalegre'): 363, ('L1', 'Évora'): 462,
    ('L2', 'L1'): 200, ('L2', 'L2'): 0, ('L2', 'L3'): 97, ('L2', 'L4'): 94, ('L2', 'L5'): 200, ('L2', 'L6'): 176, ('L2', 'L7'): 76, 
    ('L2', 'L8'): 170, ('L2', 'L9'): 428, ('L2', 'L10'): 225, ('L2', 'L11'): 291, ('L2', 'L12'): 127, ('L2', 'L13'): 195, ('L2', 'L14'): 528, 
    ('L2', 'L15'): 86, ('L2', 'L16'): 327, ('L2', 'Portalegre'): 260, ('L2', 'Évora'): 360, 
    ('L3', 'L1'): 118, ('L3', 'L2'): 97, ('L3', 'L3'): 0, ('L3', 'L4'): 214, ('L3', 'L5'): 164, ('L3', 'L6'): 107, ('L3', 'L7'): 171, 
    ('L3', 'L8'): 266, ('L3', 'L9'): 536, ('L3', 'L10'): 334, ('L3', 'L11'): 400, ('L3', 'L12'): 100, ('L3', 'L13'): 273, ('L3', 'L14'): 637, 
    ('L3', 'L15'): 162, ('L3', 'L16'): 435, ('L3', 'Portalegre'): 355, ('L3', 'Évora'): 493,
    ('L4', 'L1'): 324, ('L4', 'L2'): 94, ('L4', 'L3'): 214, ('L4', 'L4'): 0, ('L4', 'L5'): 195, ('L4', 'L6'): 171, ('L4', 'L7'): 155, 
    ('L4', 'L8'): 138, ('L4', 'L9'): 343, ('L4', 'L10'): 141, ('L4', 'L11'): 206, ('L4', 'L12'): 122, ('L4', 'L13'): 79, ('L4', 'L14'): 443, 
    ('L4', 'L15'): 63, ('L4', 'L16'): 242, ('L4', 'Portalegre'): 172, ('L4', 'Évora'): 300,
    ('L5', 'L1'): 274, ('L5', 'L2'): 200, ('L5', 'L3'): 164, ('L5', 'L4'): 195, ('L5', 'L5'): 0, ('L5', 'L6'): 62, ('L5', 'L7'): 273, 
    ('L5', 'L8'): 331, ('L5', 'L9'): 521, ('L5', 'L10'): 320, ('L5', 'L11'): 385, ('L5', 'L12'): 74, ('L5', 'L13'): 258, ('L5', 'L14'): 622, 
    ('L5', 'L15'): 148, ('L5', 'L16'): 421, ('L5', 'Portalegre'): 365, ('L5', 'Évora'): 478,
    ('L6', 'L1'): 217, ('L6', 'L2'): 176, ('L6', 'L3'): 107, ('L6', 'L4'): 171, ('L6', 'L5'): 62, ('L6', 'L6'): 0, ('L6', 'L7'): 251, 
    ('L6', 'L8'): 309, ('L6', 'L9'): 499, ('L6', 'L10'): 298, ('L6', 'L11'): 363, ('L6', 'L12'): 57, ('L6', 'L13'): 236, ('L6', 'L14'): 600, 
    ('L6', 'L15'): 126, ('L6', 'L16'): 399, ('L6', 'Portalegre'): 344, ('L6', 'Évora'): 457,
    ('L7', 'L1'): 178, ('L7', 'L2'): 76, ('L7', 'L3'): 171, ('L7', 'L4'): 155, ('L7', 'L5'): 273, ('L7', 'L6'): 251, ('L7', 'L7'): 0, 
    ('L7', 'L8'): 99, ('L7', 'L9'): 369, ('L7', 'L10'): 253, ('L7', 'L11'): 318, ('L7', 'L12'): 200, ('L7', 'L13'): 262, ('L7', 'L14'): 555, 
    ('L7', 'L15'): 159, ('L7', 'L16'): 354, ('L7', 'Portalegre'): 189, ('L7', 'Évora'): 289,
    ('L8', 'L1'): 273, ('L8', 'L2'): 170, ('L8', 'L3'): 266, ('L8', 'L4'): 138, ('L8', 'L5'): 331, ('L8', 'L6'): 309, ('L8', 'L7'): 99,
    ('L8', 'L8'): 0, ('L8', 'L9'): 275, ('L8', 'L10'): 159, ('L8', 'L11'): 224, ('L8', 'L12'): 257, ('L8', 'L13'): 169, ('L8', 'L14'): 461, 
    ('L8', 'L15'): 199, ('L8', 'L16'): 260, ('L8', 'Portalegre'): 95, ('L8', 'Évora'): 195,
    ('L9', 'L1'): 542, ('L9', 'L2'): 428, ('L9', 'L3'): 536, ('L9', 'L4'): 343, ('L9', 'L5'): 521, ('L9', 'L6'): 499, ('L9', 'L7'): 369,
    ('L9', 'L8'): 275, ('L9', 'L9'): 0, ('L9', 'L10'): 205, ('L9', 'L11'): 176, ('L9', 'L12'): 448, ('L9', 'L13'): 283, ('L9', 'L14'): 147,
    ('L9', 'L15'): 389, ('L9', 'L16'): 142, ('L9', 'Portalegre'): 181, ('L9', 'Évora'): 80,
    ('L10', 'L1'): 444, ('L10', 'L2'): 225, ('L10', 'L3'): 334, ('L10', 'L4'): 141, ('L10', 'L5'): 320, ('L10', 'L6'): 298, ('L10', 'L7'): 253,
    ('L10', 'L8'): 159, ('L10', 'L9'): 205, ('L10', 'L10'): 0, ('L10', 'L11'): 80, ('L10', 'L12'): 245, ('L10', 'L13'): 81, ('L10', 'L14'): 307, 
    ('L10', 'L15'): 186, ('L10', 'L16'): 117, ('L10', 'Portalegre'): 162, ('L10', 'Évora'): 163,
    ('L11', 'L1'): 510, ('L11', 'L2'): 291, ('L11', 'L3'): 400, ('L11', 'L4'): 206, ('L11', 'L5'): 385, ('L11', 'L6'): 363, ('L11', 'L7'): 318,
    ('L11', 'L8'): 224, ('L11', 'L9'): 176, ('L11', 'L10'): 80, ('L11', 'L11'): 0, ('L11', 'L12'): 314, ('L11', 'L13'): 150, ('L11', 'L14'): 281, 
    ('L11', 'L15'): 255, ('L11', 'L16'): 53, ('L11', 'Portalegre'): 230, ('L11', 'Évora'): 137,
    ('L12', 'L1'): 210, ('L12', 'L2'): 127, ('L12', 'L3'): 100, ('L12', 'L4'): 122, ('L12', 'L5'): 74, ('L12', 'L6'): 57, ('L12', 'L7'): 200,
    ('L12', 'L8'): 257, ('L12', 'L9'): 448, ('L12', 'L10'): 245, ('L12', 'L11'): 314, ('L12', 'L12'): 0, ('L12', 'L13'): 187, ('L12', 'L14'): 551, 
    ('L12', 'L15'): 76, ('L12', 'L16'): 349, ('L12', 'Portalegre'): 294, ('L12', 'Évora'): 407,
    ('L13', 'L1'): 383, ('L13', 'L2'): 195, ('L13', 'L3'): 273, ('L13', 'L4'): 79, ('L13', 'L5'): 258, ('L13', 'L6'): 236, ('L13', 'L7'): 262,
    ('L13', 'L8'): 169, ('L13', 'L9'): 283, ('L13', 'L10'): 81, ('L13', 'L11'): 150, ('L13', 'L12'): 187, ('L13', 'L13'): 0, ('L13', 'L14'): 383, 
    ('L13', 'L15'): 119, ('L13', 'L16'): 180, ('L13', 'Portalegre'): 172, ('L13', 'Évora'): 239,
    ('L14', 'L1'): 751, ('L14', 'L2'): 528, ('L14', 'L3'): 637, ('L14', 'L4'): 443, ('L14', 'L5'): 622, ('L14', 'L6'): 600, ('L14', 'L7'): 555,
    ('L14', 'L8'): 461, ('L14', 'L9'): 147, ('L14', 'L10'): 307, ('L14', 'L11'): 281, ('L14', 'L12'): 551, ('L14', 'L13'): 383, ('L14', 'L14'): 0,
    ('L14', 'L15'): 491, ('L14', 'L16'): 244, ('L14', 'Portalegre'): 382, ('L14', 'Évora'): 226,
    ('L15', 'L1'): 272, ('L15', 'L2'): 86, ('L15', 'L3'): 162, ('L15', 'L4'): 63, ('L15', 'L5'): 148, ('L15', 'L6'): 126, ('L15', 'L7'): 289,
    ('L15', 'L8'): 289, ('L15', 'L9'): 289, ('L15', 'L10'): 289, ('L15', 'L11'): 289, ('L15', 'L12'): 289, ('L15', 'L13'): 289, ('L15', 'L14'): 289,
    ('L15', 'L15'): 0, ('L15', 'L16'): 289, ('L15', 'Portalegre'): 234, ('L15', 'Évora'): 347,
    ('L16', 'Portalegre'): 193, ('L16', 'Évora'): 100,
    ('L17', 'Évora'): 103
} 

demand_twh = {
    "Bragança": 0, "Viseu": 0, "Vila Real": 0, "Coimbra": 3.87, "Viana do Castelo": 0.67, "Braga": 0,
    "Guarda": 0, "Castelo Branco": 0.54, "Beja": 0, "Santarém": 0.53, "Lisboa": 1.34, "Porto": 0,
    "Leiria": 0.63, "Faro": 0.62, "Aveiro": 0.84, "Setúbal": 5.25, "Portalegre": 0, "Évora": 0
}

# Função para calcular custo de transporte entre 0.35 e 0.50 €/tH2-km
def calculate_transport_cost(dist_km):
    min_cost = 0.35
    max_cost = 0.50
    cost_per_km = min_cost + ((max_cost - min_cost) * min(dist_km / 400, 1))
    return round(cost_per_km, 2)
transportation_cost = {k: calculate_transport_cost(v) for k, v in distance.items()}

# Conversion of TWh to tons per day
def convert_twh_to_ton_day(demand_twh):
    especific_energy_h2 = 33.33  # kWh/kg
    demand_ton_year = (demand_twh * 1e12) / (especific_energy_h2 * 1e3)  # Convert to tons/year
    demand_ton_day = demand_ton_year / 365  # Convert to tons/day
    return demand_ton_day

demand = {loc: convert_twh_to_ton_day(demand) for loc, demand in demand_twh.items()}

energy_availability = {
    "L1": {"hydro": 760, "wind": 50, "solar": 50},
    "L2": {"hydro": 330, "wind": 410, "solar": 0},
    "L3": {"hydro": 110, "wind": 700, "solar": 40},
    "L4": {"hydro": 380, "wind": 90, "solar": 0},
    "L5": {"hydro": 270, "wind": 240, "solar": 0},
    "L6": {"hydro": 150, "wind": 390, "solar": 10},
    "L7": {"hydro": 110, "wind": 330, "solar": 10},
    "L8": {"hydro": 0, "wind": 0, "solar": 0},
    "L9": {"hydro": 200, "wind": 50, "solar": 240},
    "L10": {"hydro": 0, "wind": 0, "solar": 0},
    "L11": {"hydro": 0, "wind": 0, "solar": 0},
    "L12": {"hydro": 0, "wind": 0, "solar": 0},
    "L13": {"hydro": 0, "wind": 0, "solar": 0},
    "L14": {"hydro": 0, "wind": 140, "solar": 210},
    "L15": {"hydro": 0, "wind": 0, "solar": 0},
    "L16": {"hydro": 0, "wind": 0, "solar": 0},
    "L17": {"hydro": 0, "wind": 0, "solar": 0},
    "L18": {"hydro": 0, "wind": 0, "solar": 0},
}

targets = {
    2030: 0.035,
    2040: 0.125,
    2050: 0.225
}

model = plp.LpProblem("Green_Hydrogen_Supply_Chain", plp.LpMinimize)

# DECISION VARIABLE: quantity of H2 transported from local i to district j
quantity_transported = plp.LpVariable.dicts("quantity transported", [(i, j) for i in locals for j in districts], lowBound=0, cat="Continuous")

# DECISION VARIABLE: if a fabric is installed in local i with size z
fabric_installed = plp.LpVariable.dicts("fabric_installed", [(i, z) for i in locals for z in ["S", "M", "L"]], cat="binary")

# OBJECTIVE FUNCTION: minimize the costs of installation and transportation
model += (plp.lpSum(fabric_installed[(i, z)] * cost_instalation[i][z] for i in locals for z in ["S", "M", "L"]) 
           + plp.lpSum(quantity_transported[i, j] * transportation_cost[(i, j)] * distance [(i, j)] for i in locals for j in districts))

# CONSTRAINTS
# 1 - The total production in each local can't exceed the total capacity of that fabric
for i in locals:
    for z in ['S', 'M', 'L']:
        model += plp.lpSum(quantity_transported[(i, j)] for j in districts) <= fabrics_capacity[z] * fabric_installed[(i, z)], f"Capacidade_fabrica_{i}_{z}"

# 2 - Total demand in each district has to be satisfied
for j in districts:
    model += plp.lpSum(quantity_transported[(i, j)] for i in locals) >= demand[j], f"Demand_{j}"

# REVER   
# 3- Constraint to renewable energy
for i in locals:
    # We can define a rule of proportion, depending on how much renewable energy is necessary to produce one unit of H₂.
    model += plp.lpSum(quantity_transported[(i, j)] for j in districts) <= (energy_availability[i]["hydro"] + energy_availability[i]["wind"] + energy_availability[i]["solar"]), f"Energia_disponivel_{i}"

# REVER        
# Constraint to satisfy the adjusted demand for the years 2030, 2040, 2050 
for year, target in targets.items():
    for j in districts:
        model += plp.lpSum(quantity_transported[(i, j)] for i in locals) >= demand[j] * target, f"Demand_{j}_{year}"

model.solve()

print("Status:", plp.LpStatus[model.status])
print("\nProduct Flows (H₂ Transported):")
for i in locals:
    for j in districts:
        if quantity_transported[(i, j)].varValue > 0:
            print(f"Quantity transported from {i} to {j}: {quantity_transported[(i, j)].varValue} tH2")
print("\nInstalled Fabrics:")
for i in locals:
    for z in ["S", "M", "L"]:
        if fabric_installed[(i, z)].varValue > 0:
            print(f"Fabrics of size {z} installed in {i}: {fabric_installed[(i, z)].varValue}") # REVER ESTA LINHA
            
